RAILS_ENV=production bundle exec rake assets:precompile
git add public/assets
git commit -m "vendor compiled assets"
git push 
git push heroku master

# Routes
rake traceroute

# Style
rubocop
    https://github.com/bbatsov/rubocop/blob/master/manual/formatters.md
    https://www.dennyzhang.com/rubocop_errors
    http://rubocop.readthedocs.io/en/latest/basic_usage/
    https://github.com/bbatsov/rubocop/blob/master/manual/cops_metrics.md
rubocop --auto-gen-config #for config which you can edit
rubocop -a <file></file>
rubocop --format worst
rubocop --format offenses
rails_best_practices .

# Refactor bad code
rubycritic
reek
flog > flog_output.txt
flay

"Code that flay reports as similar is a good candidate for refactoring."

"FLOG: scores above 20 indicate the method may need refactoring, and above 60 is dangerous. "



Note that size: size is equivalent to :size => size.


Use helpers if you're working in a view (template) and you need to build a complex bit of HTML such as a <table>. Or, if you want to change some presentation data that's not connected to the database.

def truncate_html( html, options = {} )
  options[:length] = 35 unless options[:length]
  truncate( strip_tags( html ), options )
end

Use models when you're working with database objects, and you want to simplify the business logic.

  def one_day?
    start_date.to_s[0,9] == end_date.to_s[0,9]
  end  
Here's Helpers in the guides: http://api.rubyonrails.org/v5.1/classes/ActionController/Helpers.html

And here's Models: http://guides.rubyonrails.org/active_record_querying.html


TL;DR= Models is for database logic; Helpers are for view logic.

######
The Concern is a tool provided by the ActiveSupport lib for including modules in classes, creating mixins.

A good concern should be able to work in isolation, so it must be dependency-free. It should have a very concrete and limited responsibility. The kind of responsibilities for a concern should be framework or infrastructure related. That means that they shouldn’t contain business logic. Business logic is better modelled as abstractions (classes), rather than concerns. Value objects, services, repositories, aggregates or whatever artifact that fits better.
But even good concerns present software design problems. Concerns are a bit harder to test, since you need more arrangement. But maybe the most important problem is that concerns promote the is a relation between our classes. With theis a relation, an object inherits behaviour directly, so more and more responsibilites are aggregated to the object as long as we keep adding concerns. True seggregation of responsibilities come with has a relationship, either via composition or aggregation.
Finally, it’s hard to say what problem concerns solve. Every problem that concerns solve can be solved with composition or aggregation. Better than that, composition/aggregation solve the same problem but explicitly.

TL;DR= Concerns for code shared between controllers or between models. 


###
Classes are also objects in Ruby, so they can have their own instance variables which are called class instance variables.

@@world is a class variable
@insworld is a class instance variable
#index is an instance method
When you try to access @insworld in #index, Ruby searches for the instance variable in the A object (meaning A.new) because #index is an instance method.

But you defined @insworld as a class instance variable which means it is defined in the class object itself (meaning A).

The following code demonstrates:

class Hi
  @@a = 1 # class variable
  @b  = 2 # class instance variable

  def initialize
    @c = 3 # instance variable
  end

  def test # instance method, works on objects of class Hi
    puts @@a # => 1
    puts @b  # => nil, there is no instance variable @b
    puts @c  # => 3 # we defined this instance variable in the initializer
  end
end

Hi.class_variables        # => @@a
Hi.instance_variables     # => @b
Hi.new.instance_variables # => @c
# Hi is an object of class Class
# Hi.new is an object of class Hi
Keep in mind that all instance variables return nil if they don't exist.


### 


stuff - a local variable
@stuff - an object variable (one per object)
@@stuff - a class variable (just one for a whole class of objects)
$stuff - a global variable (just one for the program)

# returns if something is false
return unless <something></something>


### 
What goes in Model concerns vs Controller concerns?

It depends. In the spirit of object oriented programming it is better for a model (class) to encapsulate it's own data and behaviour that is related to manipulating that data. The way the data is manipulated is of course dependant on your business logic but if it's tightly coupled with the data then it should belong in the model.

That doesn't mean all business logic belongs in the models, the controllers should be responsible for marshalling interaction between the user and the data and possibly any interactions between models.

1) For design: If you see you are violating DRY in your controllers many times, its probably time to move your logic to models.

Fat models, thin controllers

TL;DR = Controller concern for routing; Model concern for database manipulation.


###
Concerns, and mixins in general, are poor choices for breaking down a large class. They are not self-contained – they pollute the classes that they are included into. They create cyclic dependencies: the mixin depends on methods of the class, and the class depends on the mixin methods. Remember that mixins are essentially multiple inheritance.

What Mixins Are Actually For
If you look at Ruby core and the standard library, you’ll notice that mixins are used for one thing: convenience methods. Take Comparable, for example. It allows you to write x < y, which could otherwise be written as (x <=> y) < 0. The < method makes code nicer to read, but it’s just piggybacking off the functionality of the <=> method, which the Comparable depends on. The same can be said for Enumerable and Forwardable.

When it comes to Rails, it’s a contentious issue whether concerns should be used at all. Controversy aside, slimming down a single model is still probably a bad use case for concerns. Concerns are used to give identical functionality to multiple different model classes. For example, if you can apply tags to both users and blog posts, then you might make a Taggable concern that gets included into the User and BlogPost model classes. A concern that is only included into a single model class is a kind of code smell.